syntax = "proto3";
package freemasonry.pledge.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "pledge/v1/staking.proto";
import "pledge/v1/pledge.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "freemasonry.cc/blockchain/x/pledge/types";

// Msg defines the erc20 Msg service.
service Msg {
  rpc Delegate(MsgPledge) returns (MsgEmptyResponse);
  rpc Undelegate(MsgUnpledge) returns (MsgEmptyResponse);
  rpc WithdrawDelegatorReward(MsgWithdrawDelegatorReward) returns (MsgWithdrawDelegatorRewardResponse);
  //rpc CreateValidator(MsgCreateValidator) returns (MsgCreateValidatorResponse);
}

message MsgPledge {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string                   delegator_address = 2 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  string                   validator_address = 3 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  cosmos.base.v1beta1.Coin amount            = 4 [(gogoproto.nullable) = false];
}

// MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
// from a single validator.
message MsgWithdrawDelegatorReward {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string delegator_address = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  string validator_address = 2 [(gogoproto.moretags) = "yaml:\"validator_address\""];
}

//todo 
message MsgUnpledge {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  string                   validator_address = 2 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  cosmos.base.v1beta1.Coin amount            = 3 [(gogoproto.nullable) = false];
}

// MsgCreateValidator defines a SDK message for creating a new validator.
message MsgCreateValidator {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  Description     description         = 1 [(gogoproto.nullable) = false];
  CommissionRates commission          = 2 [(gogoproto.nullable) = false];
  string          min_self_delegation = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags)   = "yaml:\"min_self_delegation\"",
    (gogoproto.nullable)   = false
  ];
  string                   delegator_address = 4 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  string                   validator_address = 5 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  google.protobuf.Any      pubkey            = 6 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  cosmos.base.v1beta1.Coin value             = 7 [(gogoproto.nullable) = false];
}


message PledgeDelegateProposal {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  string   title                           = 1;
  string   description                     = 2;
  repeated freemasonry.pledge.v1.PledgeDelegate delegate = 3 [(gogoproto.nullable) = false];
}

// MsgConvertCoinResponse returns no fieldsyou
message MsgEmptyResponse {}
message MsgDelegateResponse {}
message MsgWithdrawDelegatorRewardResponse {}
//message MsgCreateValidatorResponse {}
//message MsgUndelegateResponse {
//  google.protobuf.Timestamp completion_time = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
//}
